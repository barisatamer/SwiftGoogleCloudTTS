//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/texttospeech/v1beta1/cloud_tts.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service that implements Google Cloud Text-to-Speech API.
///
/// Usage: instantiate `Google_Cloud_Texttospeech_V1beta1_TextToSpeechClient`, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientInterceptorFactoryProtocol? { get }

  func listVoices(
    _ request: Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest, Google_Cloud_Texttospeech_V1beta1_ListVoicesResponse>

  func synthesizeSpeech(
    _ request: Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest, Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechResponse>
}

extension Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientProtocol {
  public var serviceName: String {
    return "google.cloud.texttospeech.v1beta1.TextToSpeech"
  }

  /// Returns a list of Voice supported for synthesis.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVoices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listVoices(
    _ request: Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest, Google_Cloud_Texttospeech_V1beta1_ListVoicesResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.texttospeech.v1beta1.TextToSpeech/ListVoices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVoicesInterceptors() ?? []
    )
  }

  /// Synthesizes speech synchronously: receive results after all text input
  /// has been processed.
  ///
  /// - Parameters:
  ///   - request: Request to send to SynthesizeSpeech.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func synthesizeSpeech(
    _ request: Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest, Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechResponse> {
    return self.makeUnaryCall(
      path: "/google.cloud.texttospeech.v1beta1.TextToSpeech/SynthesizeSpeech",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSynthesizeSpeechInterceptors() ?? []
    )
  }
}

public protocol Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'listVoices'.
  func makeListVoicesInterceptors() -> [ClientInterceptor<Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest, Google_Cloud_Texttospeech_V1beta1_ListVoicesResponse>]

  /// - Returns: Interceptors to use when invoking 'synthesizeSpeech'.
  func makeSynthesizeSpeechInterceptors() -> [ClientInterceptor<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest, Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechResponse>]
}

public final class Google_Cloud_Texttospeech_V1beta1_TextToSpeechClient: Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientInterceptorFactoryProtocol?

  /// Creates a client for the google.cloud.texttospeech.v1beta1.TextToSpeech service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Google_Cloud_Texttospeech_V1beta1_TextToSpeechClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service that implements Google Cloud Text-to-Speech API.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Texttospeech_V1beta1_TextToSpeechProvider: CallHandlerProvider {
  var interceptors: Google_Cloud_Texttospeech_V1beta1_TextToSpeechServerInterceptorFactoryProtocol? { get }

  /// Returns a list of Voice supported for synthesis.
  func listVoices(request: Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Texttospeech_V1beta1_ListVoicesResponse>

  /// Synthesizes speech synchronously: receive results after all text input
  /// has been processed.
  func synthesizeSpeech(request: Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechResponse>
}

extension Google_Cloud_Texttospeech_V1beta1_TextToSpeechProvider {
  public var serviceName: Substring { return "google.cloud.texttospeech.v1beta1.TextToSpeech" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListVoices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest>(),
        responseSerializer: ProtobufSerializer<Google_Cloud_Texttospeech_V1beta1_ListVoicesResponse>(),
        interceptors: self.interceptors?.makeListVoicesInterceptors() ?? [],
        userFunction: self.listVoices(request:context:)
      )

    case "SynthesizeSpeech":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest>(),
        responseSerializer: ProtobufSerializer<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechResponse>(),
        interceptors: self.interceptors?.makeSynthesizeSpeechInterceptors() ?? [],
        userFunction: self.synthesizeSpeech(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Google_Cloud_Texttospeech_V1beta1_TextToSpeechServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listVoices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListVoicesInterceptors() -> [ServerInterceptor<Google_Cloud_Texttospeech_V1beta1_ListVoicesRequest, Google_Cloud_Texttospeech_V1beta1_ListVoicesResponse>]

  /// - Returns: Interceptors to use when handling 'synthesizeSpeech'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSynthesizeSpeechInterceptors() -> [ServerInterceptor<Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechRequest, Google_Cloud_Texttospeech_V1beta1_SynthesizeSpeechResponse>]
}
